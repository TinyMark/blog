(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{390:function(t,a,s){t.exports=s.p+"assets/img/849589-20180402132530342-980121409.58245ed9.png"},391:function(t,a,s){t.exports=s.p+"assets/img/849589-20180402133438219-1946132192.839422a3.png"},392:function(t,a,s){t.exports=s.p+"assets/img/849589-20171015223238449-2146169197.33a947c7.gif"},393:function(t,a,s){t.exports=s.p+"assets/img/849589-20171015224719590-1433219824.1c7e20f3.gif"},394:function(t,a,s){t.exports=s.p+"assets/img/849589-20171015225645277-1151100000.91b76e8e.gif"},407:function(t,a,s){"use strict";s.r(a);var n=s(26),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"十大经典排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十大经典排序算法"}},[t._v("#")]),t._v(" 十大经典排序算法")]),t._v(" "),n("h2",{attrs:{id:"算法概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法概述"}},[t._v("#")]),t._v(" 算法概述")]),t._v(" "),n("h3",{attrs:{id:"_1-算法分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-算法分类"}},[t._v("#")]),t._v(" 1. 算法分类")]),t._v(" "),n("p",[t._v("十种常见排序算法可以分为两大类：")]),t._v(" "),n("ul",[n("li",[t._v("比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破 O(nlogn)，因此也称为非线性时间比较类排序。")]),t._v(" "),n("li",[t._v("非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(390),alt:"849589-20180402132530342-980121409"}})]),t._v(" "),n("h3",{attrs:{id:"_2-算法复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-算法复杂度"}},[t._v("#")]),t._v(" 2. 算法复杂度")]),t._v(" "),n("p",[n("img",{attrs:{src:s(391),alt:"849589-20180402133438219-1946132192"}})]),t._v(" "),n("h3",{attrs:{id:"_3-相关概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-相关概念"}},[t._v("#")]),t._v(" 3. 相关概念")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("稳定")]),t._v("：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面。")]),t._v(" "),n("li",[n("strong",[t._v("不稳定")]),t._v("：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面。")]),t._v(" "),n("li",[n("strong",[t._v("时间复杂度")]),t._v("：对排序数据的总的操作次数。反映当 n 变化时，操作次数呈现什么规律。")]),t._v(" "),n("li",[n("strong",[t._v("空间复杂度")]),t._v("：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模 n 的函数。")])]),t._v(" "),n("h2",{attrs:{id:"排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[t._v("#")]),t._v(" 排序算法")]),t._v(" "),n("h3",{attrs:{id:"_1-冒泡排序（bubble-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-冒泡排序（bubble-sort）"}},[t._v("#")]),t._v(" 1. 冒泡排序（Bubble Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("冒泡排序是一种简单的排序算法。")]),t._v(" "),n("p",[t._v("它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。")]),t._v(" "),n("p",[t._v("走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。")]),t._v(" "),n("p",[t._v("这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("算法描述")]),t._v(" "),n("ul",[n("li",[t._v("比较相邻的元素。如果第一个比第二个大，就交换它们两个；")]),t._v(" "),n("li",[t._v("对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；")]),t._v(" "),n("li",[t._v("针对所有的元素重复以上的步骤，除了最后一个；")]),t._v(" "),n("li",[t._v("重复步骤 1~3，直到排序完成。")])])]),t._v(" "),n("li",[n("p",[t._v("动图演示")]),t._v(" "),n("p",[n("img",{attrs:{src:s(392),alt:"849589-20171015223238449-2146169197"}})])]),t._v(" "),n("li",[n("p",[t._v("代码实现")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bubbleSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相邻元素两两对比")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素交换")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"_2-选择排序（selection-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-选择排序（selection-sort）"}},[t._v("#")]),t._v(" 2. 选择排序（Selection Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("选择排序(Selection-sort)是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理：")]),t._v(" "),n("p",[t._v("首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置")]),t._v(" "),n("p",[t._v("然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。")]),t._v(" "),n("p",[t._v("以此类推，直到所有元素均排序完毕。")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("算法描述（n 个记录的直接选择排序可经过 n-1 趟直接选择排序得到有序结果。具体算法描述如下：）")]),t._v(" "),n("ul",[n("li",[t._v("初始状态：无序区为 R[1..n]，有序区为空；")]),t._v(" "),n("li",[t._v("第 i 趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为 R[1..i-1]和 R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第 1 个记录 R 交换，使 R[1..i]和 R[i+1..n)分别变为记录个数增加 1 个的新有序区和记录个数减少 1 个的新无序区；")]),t._v(" "),n("li",[t._v("n-1 趟结束，数组有序化了。")])])]),t._v(" "),n("li",[n("p",[t._v("动图演示"),n("img",{attrs:{src:s(393),alt:"849589-20171015224719590-1433219824"}})])]),t._v(" "),n("li",[n("p",[t._v("代码实现")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectionSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 寻找最小的数")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素交换")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("算法分析")]),t._v(" "),n("p",[t._v("表现最稳定的排序算法之一，因为无论什么数据进去都是 $O(n^2)​$ 的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。")])])]),t._v(" "),n("h3",{attrs:{id:"_3-插入排序（insertion-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-插入排序（insertion-sort）"}},[t._v("#")]),t._v(" 3. 插入排序（Insertion Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("算法描述")]),t._v(" "),n("p",[t._v("一般来说，插入排序都采用 in-place 在数组上实现。具体算法描述如下：")]),t._v(" "),n("ul",[n("li",[t._v("从第一个元素开始，该元素可以认为已经被排序；")]),t._v(" "),n("li",[t._v("取出下一个元素，在已经排序的元素序列中从后向前扫描；")]),t._v(" "),n("li",[t._v("如果该元素（已排序）大于新元素，将该元素移到下一位置；")]),t._v(" "),n("li",[t._v("重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；")]),t._v(" "),n("li",[t._v("将新元素插入到该位置后；")]),t._v(" "),n("li",[t._v("重复步骤 2~5。")])])]),t._v(" "),n("li",[n("p",[t._v("动图演示"),n("img",{attrs:{src:s(394),alt:"849589-20171015225645277-1151100000"}})])]),t._v(" "),n("li",[n("p",[t._v("代码实现")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertionSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    current "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  交换")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n        current "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[n("p",[t._v("算法分析")]),t._v(" "),n("p",[t._v("入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。")])])]),t._v(" "),n("h3",{attrs:{id:"_4-希尔排序（shell-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-希尔排序（shell-sort）"}},[t._v("#")]),t._v(" 4. 希尔排序（Shell Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("1959 年 Shell 发明，第一个突破 O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫"),n("strong",[t._v("缩小增量排序")]),t._v("。")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("算法描述")])]),t._v(" "),n("li",[n("p",[t._v("动图演示")])]),t._v(" "),n("li",[n("p",[t._v("代码实现")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sortArr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fraction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    fraction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    fraction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fraction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fraction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" fraction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fraction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" fraction\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fraction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fraction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[t._v("算法分析")])]),t._v(" "),n("h3",{attrs:{id:"_5-归并排序（merge-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-归并排序（merge-sort）"}},[t._v("#")]),t._v(" 5. 归并排序（Merge Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")])]),t._v(" "),n("ol",[n("li",[t._v("算法描述")]),t._v(" "),n("li",[t._v("动图演示")]),t._v(" "),n("li",[t._v("代码实现")]),t._v(" "),n("li",[t._v("算法分析")])]),t._v(" "),n("h3",{attrs:{id:"_6-快速排序（quick-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-快速排序（quick-sort）"}},[t._v("#")]),t._v(" 6. 快速排序（Quick Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")])]),t._v(" "),n("ol",[n("li",[t._v("算法描述")]),t._v(" "),n("li",[t._v("动图演示")]),t._v(" "),n("li",[t._v("代码实现")]),t._v(" "),n("li",[t._v("算法分析")])]),t._v(" "),n("h3",{attrs:{id:"_7-堆排序（heap-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-堆排序（heap-sort）"}},[t._v("#")]),t._v(" 7. 堆排序（Heap Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")])]),t._v(" "),n("ol",[n("li",[t._v("算法描述")]),t._v(" "),n("li",[t._v("动图演示")]),t._v(" "),n("li",[t._v("代码实现")]),t._v(" "),n("li",[t._v("算法分析")])]),t._v(" "),n("h3",{attrs:{id:"_8-计数排序（counting-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-计数排序（counting-sort）"}},[t._v("#")]),t._v(" 8. 计数排序（Counting Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")])]),t._v(" "),n("ol",[n("li",[t._v("算法描述")]),t._v(" "),n("li",[t._v("动图演示")]),t._v(" "),n("li",[t._v("代码实现")]),t._v(" "),n("li",[t._v("算法分析")])]),t._v(" "),n("h3",{attrs:{id:"_9-桶排序（bucket-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-桶排序（bucket-sort）"}},[t._v("#")]),t._v(" 9. 桶排序（Bucket Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")])]),t._v(" "),n("ol",[n("li",[t._v("算法描述")]),t._v(" "),n("li",[t._v("动图演示")]),t._v(" "),n("li",[t._v("代码实现")]),t._v(" "),n("li",[t._v("算法分析")])]),t._v(" "),n("h3",{attrs:{id:"_10-基数排序（radix-sort）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-基数排序（radix-sort）"}},[t._v("#")]),t._v(" 10. 基数排序（Radix Sort）")]),t._v(" "),n("blockquote",[n("p",[t._v("插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。")]),t._v(" "),n("p",[t._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。")])]),t._v(" "),n("ol",[n("li",[t._v("算法描述")]),t._v(" "),n("li",[t._v("动图演示")]),t._v(" "),n("li",[t._v("代码实现")]),t._v(" "),n("li",[t._v("算法分析")])])])}),[],!1,null,null,null);a.default=r.exports}}]);